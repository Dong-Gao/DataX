variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end -DskipTests --show-version -DinstallAtEnd=false -DdeployAtEnd=false"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - target/

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
.verify: &verify
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
  except:
    - master

# Verify merge requests using JDK8
verify:jdk8:
  <<: *verify

build:
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS clean package assembly:assembly'
  only:
    changes:
      - "^src/*.{java,xml}"
test:
  stage: test
  script:
    - /bin/bash test.sh
  only:
    changes:
      - "^src/*.{java,xml}"
  dependencies:
    - build
  when: on_success
  
deploy_stage:
  stage: deploy
  script:
    - /bin/bash deploy.sh
  only:
    - master
  environment: 
    name: staging
    url: http://gitlab.ds.cfzq.com
  dependencies:
    - test
  when: on_success
  
deploy_prod:
  stage: deploy
  script:
    - /bin/bash deploy.sh
  only:
    - master
  environment: 
    name: production
    url: http://gitlab.ds.cfzq.com
  dependencies:
    - test
  when: manual